{"version":3,"sources":["login/SignUpForm.tsx","utils.ts","login/LoginForm.tsx","layout/pre-login.tsx","components/guarded-route.tsx","utils/hooks.ts","resolvers/DecksResolver.tsx","components/modal.tsx","post-login/components/NewDeckModal.tsx","post-login/components/DeckCard.tsx","post-login/decklist.tsx","post-login/dashboard.tsx","post-login/CardSearch.tsx","post-login/DeckDetails/DeckDetails.tsx","post-login/DeckDetails/DeckDetailsRouter.tsx","post-login/PostLoginRouter.tsx","AppRouter.tsx","services/ui/ToastService.ts","components/toast.tsx","services/DeckService.ts","services/MyUserService.ts","AppServices.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["SignUpForm","useForm","register","handleSubmit","errors","useContext","ServiceContext","myUserService","toastService","history","useHistory","className","onSubmit","data","signUp","then","res","status","showSuccessToast","email","push","showErrorToast","catch","type","name","ref","required","password","to","classNameUtil","staticClasses","dynamicClasses","additionalClasses","Object","keys","filter","key","join","LoginForm","login","onClick","PreLoginLayout","props","children","LoginGuardedRoute","isAuthenticated","LogoutGuardedRoute","useConnectObservable","observable","initialVal","useState","val","setVal","useEffect","sub","subscribe","unsubscribe","DecksResolver","deckService","userId","localStorage","getItem","isLoading","setIsLoading","console","log","fetchDecks","decks","cardDict","JSON","parse","cardSet","Set","forEach","deck","cards","cardId","add","promiseArr","card","PokemonTCG","Card","find","Promise","all","map","p","cardMap","reduce","agg","id","existingCardDict","setItem","stringify","finally","Modal","showModal","closeModal","escapeFn","wrappedEscapeFn","e","keyCode","document","addEventListener","removeEventListener","useEscapeListener","stopPropagation","ModalBody","ModalHeader","ModalFooter","NewDeckModal","getMyUserId","createDeck","icon","DeckCard","deckId","uId","deleteDeck","standardLegal","expandedLegal","length","Decklist","d","Dashboard","initialIsOpen","modalOpen","setModalOpen","openModal","useModal","getDecks","undefined","logout","CardSearch","setCards","selectedCards","setSelectedCards","useParams","getDeck","query","value","where","isSelected","imageClasses","src","imageUrl","style","maxWidth","disabled","values","some","updatedDeck","updateDeck","addCards","DeckDetails","selectedCard","setSelectedCard","tempQuantity","setTempQuantity","cardQuantMap","quantity","CardWithNumber","cardQuantArray","toggleSelectCard","quantityHasChanged","isMinusDisabled","isPlusDisabled","right","top","left","opacity","index","findIndex","newCards","c","fill","Array","splice","newDeck","err","this","DeckDetailsRouter","path","useRouteMatch","exact","PostLoginRouter","AppRouter","getIsLoggedIn","ToastType","ToastService","toasts","BehaviorSubject","asObservable","message","next","Toast","success","error","curVal","newVal","visible","setTimeout","_","i","toastModel","wrapperClassList","removeToast","Toasts","getToasts","t","DeckService","http","_userDecks","get","pipe","deckArr","put","curUserDecks","delete","post","concat","MyUserService","loginApi","myUserId","isLoggedIn","authHeader","setAuthorizationHeader","signUpReq","interceptors","request","use","req","headers","authorization","removeItem","window","location","reload","loginReq","userid","resolve","axios","create","baseURL","timeout","library","fab","faTimes","faPlus","faTrash","faArrowLeft","faCheck","faMinus","React","createContext","AppServices","App","Provider","Boolean","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.960427e5.chunk.js","sourcesContent":["import React, { useContext } from 'react';\nimport { Link, useHistory } from 'react-router-dom';\nimport { useForm } from 'react-hook-form';\nimport { SignUpReq } from '../models/SignUp';\nimport { ServiceContext } from '../App';\n\nexport function SignUpForm() {\n\n  const { register, handleSubmit, errors } = useForm<SignUpReq>();\n  const { myUserService, toastService } = useContext(ServiceContext);\n  const history = useHistory();\n\n  const onSubmit = (data: SignUpReq) => myUserService.signUp(data)\n    .then(res => {\n      if (res.status === 200) {\n        toastService.showSuccessToast(`Successfully created account for ${res.data.email}`);\n        history.push('/');\n      } else {\n        toastService.showErrorToast(`User already exists.`);\n      }\n    })\n    .catch(() => toastService.showErrorToast('Error creating user. Please try again later.'));\n\n  return (\n    <div className=\"container max-w-md\">\n      <h1 className=\"text-center text-white-100 m-5\">Pokémon TCG Deckbuilder</h1>\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <label className=\"text-white-100\">First Name:</label>\n        <input type=\"text\" name=\"firstName\" className=\"mb-2\" ref={ register() } />\n        <label className=\"text-white-100\">Last Name:</label>\n        <input type=\"text\" name=\"lastName\" className=\"mb-2\" ref={ register() } />\n        <div className=\"mb-2\">\n          <label className=\"text-white-100\">Email:</label>\n          <input type=\"text\" name=\"email\" ref={ register({ required: true }) } />\n          { errors.email ? <div className=\"text-error\">Email is required.</div> : null }\n        </div>\n        <div className=\"mb-2\">\n          <label className=\"text-white-100\">Password:</label>\n          <input type=\"password\" name=\"password\" ref={ register({ required: true }) } />\n          { errors.password ? <div className=\"text-error\">Password is required.</div> : null }\n        </div>\n        <button type=\"submit\" className=\"btn btn-primary my-4 text-right\">Sign Up</button>\n      </form>\n      <small className=\"text-white-100 block\">Have an account? <Link to=\"/\">Return to login.</Link></small>\n    </div>\n  )\n}","export const classNameUtil = (staticClasses: string, dynamicClasses?: any): string => {\n  const appliedDynamicClassList = Object.keys(dynamicClasses).filter(key => dynamicClasses[key]);\n  const additionalClasses = appliedDynamicClassList.join(' ');\n  return additionalClasses ? staticClasses + ' ' + additionalClasses : staticClasses;\n}","import React, { useContext } from \"react\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport { LoginReq } from \"../models/SignUp\";\nimport { useForm } from \"react-hook-form\";\nimport { ServiceContext } from \"../App\";\nimport { classNameUtil } from \"../utils\";\n\nexport function LoginForm() {\n\n  const { register, handleSubmit, errors } = useForm<LoginReq>();\n  const { myUserService, toastService } = useContext(ServiceContext);\n  const history = useHistory();\n\n  const onSubmit = (data: LoginReq) => myUserService.login(data)\n    .then(() => history.push('/dashboard'))\n    .catch(() => toastService.showErrorToast('Failed to login.'));\n\n  return (\n    <div>\n      <h1 className=\"text-center text-white-100 m-5\">Pokémon TCG Deckbuilder</h1>\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <div className=\"mb-2\">\n          <label className=\"text-white-100\">Email:</label>\n          <input type=\"text\" name=\"email\" ref={register({ required: true })} className={classNameUtil('mb-1', {'border-error': errors.email})}/>\n          { errors.email ? <div className=\"text-error\">Email is required.</div> : null }\n        </div>\n        <div>\n          <label className=\"text-white-100\">Password:</label>\n          <input type=\"password\" name=\"password\" ref={register({ required: true })} className=\"mb-1\" />\n          { errors.password ? <div className=\"text-error\">Password is required.</div> : null }\n        </div>\n        <button className=\"btn btn-primary my-4 text-right\" type=\"submit\">Login</button>\n      </form>\n      <small className=\"text-white-100 block\">Don't have an account? <Link to=\"/signup\">Sign up.</Link></small>\n      <small className=\"text-white-100 block cursor-pointer\">\n        <a onClick={() => onSubmit({email: 'GUEST', password: 'password'})}>Alternatively, <span className=\"underline\">Sign in as guest</span>.</a>\n      </small>\n    </div>\n  )\n}","import React from \"react\";\n\nexport function PreLoginLayout(props: any) {\n  return (\n    <div className=\"bg-blue-100 h-screen flex items-center justify-center\">\n      { props.children }\n    </div>\n  )\n}","import React from \"react\";\nimport { Redirect } from \"react-router-dom\";\n\nexport type LoginGuardedRouteProps = {\n  isAuthenticated: boolean\n}\n\nexport const LoginGuardedRoute: React.FC<LoginGuardedRouteProps> = ({isAuthenticated, children}) => {\n  return isAuthenticated ? <>{children}</> : <Redirect to={'/'} />\n}\n\nexport const LogoutGuardedRoute: React.FC<LoginGuardedRouteProps> = ({isAuthenticated, children}) => {\n  return isAuthenticated ? <Redirect to={'/dashboard'} /> : <>{children}</>\n}","import { Observable } from \"rxjs\";\nimport { useState, useEffect } from \"react\";\nimport { useLocation, useParams } from \"react-router-dom\";\n\nexport const useConnectObservable = <T>(observable: Observable<T>, initialVal: T): T => {\n  const [val, setVal] = useState(initialVal);\n  useEffect(() => {\n    const sub = observable.subscribe(setVal);\n    return () => sub.unsubscribe();\n  }, [])\n  return val;\n}\n\nexport const useEscapeListener = (escapeFn: Function) => {\n  const wrappedEscapeFn = (e: KeyboardEvent) => {\n    if(e.keyCode === 27) {\n      escapeFn();\n    }\n  }\n  useEffect(() => {\n    document.addEventListener(\"keydown\", wrappedEscapeFn);\n    return () => document.removeEventListener(\"keydown\", wrappedEscapeFn);\n  }, [])\n}","import { PokemonTCG } from \"pokemon-tcg-sdk-typescript\";\nimport React, { ReactElement, useContext, useEffect, useState } from \"react\";\nimport { ServiceContext } from \"../App\";\n\nexport const DecksResolver: React.FC = (props) => {\n  const { deckService } = useContext(ServiceContext);\n  const userId = localStorage.getItem('userId');\n  const [isLoading, setIsLoading] = useState(true);\n\n  console.log(userId);\n\n  useEffect(() => {\n    if (userId) {\n      deckService.fetchDecks(userId)\n        .then(decks => {\n          let cardDict: {[key: string]: PokemonTCG.Card} = {};\n          if (localStorage.getItem('cardDict')) {\n            cardDict = JSON.parse(localStorage.getItem('cardDict')!);\n          }\n          const cardSet = new Set<string>();\n          decks.forEach(deck => {\n            deck.cards.forEach(cardId => {\n              cardSet.add(cardId);\n            });\n          });\n          const promiseArr: Function[] = [];\n          \n          cardSet.forEach((card: string) => {\n            if (!cardDict[card]) {\n              promiseArr.push(() => PokemonTCG.Card.find(card));\n            }\n          });\n          return Promise.all<PokemonTCG.Card>(promiseArr.map(p => p()))\n        })\n        .then(cards => {\n          const cardMap = cards.reduce((agg, card) => ({...agg, [card.id]: card}), {});\n          let existingCardDict = {};\n          if (localStorage.getItem('cardDict')) {\n            existingCardDict = JSON.parse(localStorage.getItem('cardDict')!);\n          }\n          localStorage.setItem('cardDict', JSON.stringify({...existingCardDict, ...cardMap}))\n        })\n        .finally(() => setIsLoading(false))\n    }\n  }, [userId])\n  \n  return isLoading ? <span>Loading...</span> : props.children as ReactElement<any>;\n}\n\n","import React, { useState } from \"react\";\nimport { useEscapeListener } from \"../utils/hooks\";\n\nexport type ModalProps = {\n  showModal: boolean,\n  closeModal: Function\n}\n\nexport const useModal = (initialIsOpen = false): [boolean, Function, Function] => {\n  const [modalOpen, setModalOpen] = useState(initialIsOpen);\n  const openModal = () => setModalOpen(true);\n  const closeModal = () => setModalOpen(false);\n  return [modalOpen, openModal, closeModal];\n}\n\nexport const Modal: React.FC<ModalProps> = ({children, showModal, closeModal}) => {\n  useEscapeListener(closeModal);\n  return (\n    <>\n    {showModal ?\n      <>\n        <div\n          className=\"justify-center items-center flex overflow-x-hidden overflow-y-auto fixed inset-0 z-50 outline-none focus:outline-none\"\n          onClick={() => closeModal()}\n        >\n          <div className=\"relative w-auto my-6 mx-auto max-w-3xl\" onClick={(e) => e.stopPropagation()}>\n            <div className=\"border-0 rounded-lg shadow-lg relative flex flex-col w-full outline-none focus:outline-none bg-blue-100 text-white-100\">\n              {children}\n            </div>\n          </div>\n        </div>\n        <div className=\"opacity-90 fixed inset-0 z-40 bg-black\"></div>\n      </> : null}\n    </>\n  );\n}\n\nexport const ModalBody: React.FC = ({children}) => {\n  return (\n    <div className=\"relative px-6 py-3 flex-auto\">\n      {children}\n    </div>\n  )\n}\n\nexport const ModalHeader: React.FC = ({children}) => {\n  return (\n    <div className=\"flex items-center justify-between p-5 rounded-t\">\n      {children}\n    </div>\n  )\n}\n\nexport const ModalFooter: React.FC = ({children}) => {\n  return (\n    <div className=\"flex items-center justify-end p-6 rounded-b\">\n      {children}\n    </div>\n  )\n}","import React, { useContext } from \"react\"\nimport { Modal, ModalProps, ModalHeader, ModalBody, ModalFooter } from \"../../components/modal\"\nimport { useForm } from \"react-hook-form\";\nimport { Deck } from \"../../models/Deck\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { ServiceContext } from \"../../App\";\nimport { useConnectObservable } from \"../../utils/hooks\";\n\nexport const NewDeckModal: React.FC<ModalProps> = ({showModal, closeModal}: ModalProps) => {\n  const { register, handleSubmit } = useForm<Deck>();\n  const { deckService, myUserService } = useContext(ServiceContext);\n  const userId = useConnectObservable(myUserService.getMyUserId(), localStorage.getItem('userId'));\n  const onSubmit = (deck: Deck) => {\n    deck.cards = [];\n    deckService.createDeck(userId ? userId : '', deck)\n      .then(res => closeModal());\n  }\n  return (\n    <Modal showModal={showModal} closeModal={closeModal}>\n      <form onSubmit={handleSubmit(onSubmit)}> \n        <ModalHeader>\n          <h2 className=\"mr-3\">New Deck</h2>\n          <FontAwesomeIcon icon='times' className=\"cursor-pointer\" onClick={() => closeModal()} />\n        </ModalHeader>\n        <ModalBody>\n          <label>Deck Name:</label>\n          <input type=\"text\" name={'name'} ref={register({ required: true })} className=\"text-black\" />\n          <div className=\"mt-3\">\n            <h4>Formats:</h4>\n            <div>\n              <input type=\"checkbox\" name={'standardLegal'} ref={register()} />\n              <label className=\"ml-3\">Standard</label>\n            </div>\n            <div>\n              <input type=\"checkbox\" name={'expandedLegal'} ref={register()} />\n              <label className=\"ml-3\">Expanded</label>\n            </div>\n          </div>\n        </ModalBody>\n        <ModalFooter>\n          <button className=\"btn btn-primary\" type=\"submit\">Create Deck</button>\n        </ModalFooter>\n      </form>\n    </Modal>\n  )\n}","import React, { useContext } from \"react\"\nimport { Deck } from \"../../models/Deck\"\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\nimport { Link, useHistory } from \"react-router-dom\"\nimport { ServiceContext } from \"../../App\"\nimport { useConnectObservable } from \"../../utils/hooks\"\n\nexport const DeckCard: React.FC<DeckCardProps> = ({ deck }) => {\n  const { deckService, myUserService } = useContext(ServiceContext);\n  const userId = useConnectObservable<string | null>(myUserService.getMyUserId(), localStorage.getItem('userId'));\n  const history = useHistory();\n  const deleteDeck = (uId: string, deckId: string) => deckService.deleteDeck(uId, deckId);\n  const navigateToDeckDetail = (e: React.MouseEvent) => history.push(`/dashboard/decks/${deck.deckId}`);\n  return (\n    <div className=\"max-w-sm rounded overflow-hidden shadow-lg bg-white-100 cursor-pointer\" onClick={navigateToDeckDetail}>\n      <div className=\"px-6 py-4\">\n        <div className=\"flex\">\n          <div className=\"font-bold text-xl mb-2 flex-grow\">{ deck.name }</div>\n          <FontAwesomeIcon icon=\"trash\" className=\"cursor-pointer hover:text-orange-dull\" onClick={(e) => {\n            e.stopPropagation();\n            deleteDeck(userId ? userId : '', deck.deckId ? deck.deckId : '');\n          }}/>\n        </div>\n        <div className=\"pt-4 flex items-center\">\n          <div className=\"flex-grow\">\n            { deck.standardLegal \n              ? <span className=\"inline-block bg-gray-med rounded-full py-1 px-3 text-sm font-semibold text-gray-700 mr-2\">Standard</span>\n              : null }\n            { deck.expandedLegal \n              ? <span className=\"inline-block bg-gray-med rounded-full py-1 px-3 text-sm font-semibold text-gray-700 mr-2\">Expanded</span>\n              : null }\n          </div>\n          <span className=\"\">{deck.cards ? deck.cards.length : 0} / 60</span>\n        </div>\n      </div>\n    </div>\n  )\n}\n\ntype DeckCardProps = {\n  deck: Deck\n}","import React from \"react\"\nimport { Deck } from \"../models/Deck\"\nimport { DeckCard } from \"./components/DeckCard\"\n\nexport type DeckListProps = {\n  decks?: Deck[]\n}\n\nexport const Decklist: React.FC<DeckListProps> = ({decks}) => {\n  return (\n    <>\n    <div className=\"grid grid-flow-col grid-cols-3 grid-rows-3 gap-4\">\n      { decks?.map(d => <DeckCard deck={d} key={d.deckId} />) }\n    </div>\n    { decks && decks.length === 0 ? <div className=\"text-white-100 text-center\">Looks like you don't have any decks yet! Click on the Plus icon to create a deck.</div> : null }\n    </>\n  )\n}","import React, { useContext } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { NewDeckModal } from './components/NewDeckModal';\nimport { ServiceContext } from '../App';\nimport { Decklist } from './decklist';\nimport { Deck } from '../models/Deck';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { useModal } from '../components/modal';\nimport { useConnectObservable } from '../utils/hooks';\n\nexport function Dashboard() {\n  const history = useHistory();\n  const [showModal, openModal, closeModal] = useModal(false);\n  const { myUserService, deckService } = useContext(ServiceContext);\n  const decks = useConnectObservable<Deck[] | undefined>(deckService.getDecks(), undefined);\n\n  const logout = () => {\n    myUserService.logout();\n    history.push('/');\n  }\n\n  return (\n    <>\n      <NewDeckModal showModal={showModal} closeModal={() => closeModal()} />\n      <div className=\"p-3 bg-blue-100 h-screen\">\n        <div className=\"flex\">\n          <div className=\"flex-grow\"></div>\n          <button className=\"btn btn-primary\" onClick={logout}>Logout</button>\n        </div>\n        <h1 className=\"text-center text-white-100 mb-5\">\n          <span className=\"mr-2\">My Decks</span>\n          <FontAwesomeIcon icon=\"plus\" className=\"cursor-pointer\" onClick={() => openModal()} />\n        </h1>\n        <Decklist decks={decks} />\n      </div>\n    </>\n  )\n}","import React, { useContext, useState } from \"react\"\nimport { PokemonTCG } from \"pokemon-tcg-sdk-typescript\"\nimport { IQuery } from \"pokemon-tcg-sdk-typescript/dist/sdk\"\nimport { useForm } from \"react-hook-form\";\nimport { classNameUtil } from \"../utils\";\nimport { ServiceContext } from \"../App\";\nimport { Link, useParams } from \"react-router-dom\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { useConnectObservable } from \"../utils/hooks\";\n\nexport const CardSearch: React.FC = () => {\n\n  const { register, handleSubmit, errors } = useForm<CardSearchForm>();\n  const [cards, setCards] = useState<any[]>([]);\n  const [selectedCards, setSelectedCards] = useState<{[key: string]: boolean}>({});\n  const { deckId } = useParams<{deckId: string}>();\n\n  const onSubmit = (val: CardSearchForm) => {\n    const query: IQuery[] = [{name: 'name', value: val.name}];\n    PokemonTCG.Card.where(query).then(res => {\n      setCards(res);\n    });\n  };\n\n  const { deckService, toastService } = useContext(ServiceContext);\n  const deck = useConnectObservable(deckService.getDeck(deckId), undefined);\n\n  const toggleSelectCard = (id: string) => setSelectedCards({...selectedCards, [id]: !selectedCards[id]});\n\n  const addCards = () => {\n    if (deck) {\n      const updatedDeck = {\n        ...deck, cards: [...deck.cards, ...Object.keys(selectedCards).filter(key => selectedCards[key])]\n      }\n      deckService.updateDeck(deckId, updatedDeck)\n        .then(() => toastService.showSuccessToast('Successfully added cards to deck.'))\n        .catch(() => toastService.showErrorToast('Failed to add cards to deck.'))\n    }\n  }\n\n  return (\n    <div className=\"bg-blue-100 h-screen text-white-100 p-4 flex flex-col\">\n      <div className=\"relative mb-4\">\n        <span className=\"absolute left-0\">\n          <Link to={`/dashboard/decks/${deckId}`}>\n            <FontAwesomeIcon icon='arrow-left' className=\"cursor-pointer inline-block mr-4\" />\n          </Link>\n          <h3 className=\"inline-block\">{deck?.name}</h3>\n        </span>\n        <h1 className=\"text-center\">Card Search</h1>\n      </div>\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <label className=\"block\">Card Name:</label>\n        <input type=\"text\" className=\"max-w-sm mb-4 mt-2 mr-4\" name=\"name\" ref={register({ required: true })} />\n        <button className=\"btn btn-primary mb-2\" type=\"submit\">Search</button>\n      </form>\n      <div className=\"flex-grow overflow-y-auto\">\n        {cards.map(card => {\n          const isSelected = selectedCards[card.id];\n          const imageClasses = classNameUtil(\"border-4 rounded inline-block p-3 m-1\", { \n            \"border-transparent\": !isSelected, \n            \"border-blue-electric\": isSelected });\n          return (\n            <div key={card.id} className={imageClasses}>\n              <img src={card.imageUrl} onClick={() => toggleSelectCard(card.id)} className=\"cursor-pointer\" style={{ maxWidth: 245 }} />\n            </div>\n          )\n        })}\n      </div>\n      <div className=\"flex pt-4\">\n        <div className=\"flex-grow\"></div>\n        <button className={classNameUtil(\"btn btn-primary\", {\n          disabled: !Object.values(selectedCards).some(isSelected => isSelected)\n        })} onClick={() => addCards()}>Add Selected Cards</button>\n      </div>\n    </div>\n  )\n}\n\ntype CardSearchForm = {\n  name: string\n}","import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { PokemonTCG } from \"pokemon-tcg-sdk-typescript\";\nimport { Card } from \"pokemon-tcg-sdk-typescript/dist/sdk\";\nimport React, { useContext, useState } from \"react\"\nimport { Link, useHistory, useParams } from \"react-router-dom\"\nimport { callbackify } from \"util\";\nimport { ServiceContext } from \"../../App\";\nimport { Deck } from \"../../models/Deck\";\nimport { classNameUtil } from \"../../utils\";\nimport { useConnectObservable } from \"../../utils/hooks\";\n\nexport const DeckDetails: React.FC = () => {\n\n  const { deckId } = useParams<{deckId: string}>();\n  const { deckService, toastService } = useContext(ServiceContext);\n  const deck = useConnectObservable<Deck | undefined>(deckService.getDeck(deckId), undefined);\n  const [selectedCard, setSelectedCard] = useState<string>('');\n  const [tempQuantity, setTempQuantity] = useState<number>(0);\n  const history = useHistory();\n\n  let cardDict: {[key: string]: PokemonTCG.Card} = {}\n  if (localStorage.getItem('cardDict')) {\n    cardDict = JSON.parse(localStorage.getItem('cardDict')!);\n  }\n\n  const cards: Card[] | undefined = deck?.cards.map(id => cardDict[id]);\n  let cardQuantMap = cards && cardDict ? cards.reduce((agg: any, card) => {\n    if (card) {\n      if (agg[card.id]) {\n        return ({\n          ...agg, \n          [card.id]: {...agg[card.id], quantity: agg[card.id].quantity + 1}})\n      }\n      return ({...agg, [card.id]: new CardWithNumber(card, 1)})\n    }\n    return agg;\n  }, {}) : {};\n  const cardQuantArray: CardWithNumber[] = cardQuantMap ? Object.values(cardQuantMap) : [];\n\n  const toggleSelectCard = (id: string) => {\n    if (selectedCard === id) {\n      setSelectedCard('');\n      setTempQuantity(0);\n    } else {\n      setSelectedCard(id);\n      setTempQuantity(cardQuantMap[id].quantity);\n    }\n  };\n\n  const addCards = () => history.push(`/dashboard/decks/${deckId}/add`);\n\n  const updateDeck = () => {\n    const index = deck?.cards.findIndex((cardId: string) => cardId === selectedCard);\n    if (index !== undefined && index >= 0 && deck) {\n      const newCards = deck?.cards.filter(c => c !== selectedCard);\n      const fill = new Array(tempQuantity);\n      fill.fill(selectedCard);\n      newCards?.splice(index, 0 , ...fill);\n      const newDeck: Deck = {\n        ...deck,\n        cards: newCards\n      }\n      deckService.updateDeck(deckId, newDeck)\n        .catch(err => toastService.showErrorToast('Failed to update deck'))\n        .finally(() => setSelectedCard(''))\n    }\n  };\n\n  return (\n    <div className=\"bg-blue-100 h-screen text-white-100 p-4 flex flex-col\">\n      <div className=\"header\">\n        <div className=\"relative mb-4\">\n          <span className=\"absolute left-0\">\n            <Link to={'/dashboard'}>\n              <FontAwesomeIcon icon='arrow-left' className=\"cursor-pointer inline-block mr-4\" />\n            </Link>\n            <h3 className=\"inline-block\">Decks</h3>\n          </span>\n          <div className=\"text-white-100 text-center\">\n            <h2 className=\"inline-block\">{deck ? `(${deck.cards.length} / 60)` : null}</h2>\n            <h1 className=\"ml-4 mr-4 inline-block\">{deck?.name}</h1>\n            <FontAwesomeIcon icon=\"plus\" className=\"cursor-pointer mb-1\" onClick={() => addCards()} />\n          </div>\n        </div>\n      </div>\n      <div className=\"body overflow-y-auto flex-grow\">\n        <div className=\"text-center\">\n          { cards ? cardQuantArray.map(card => {\n            const isSelected = card.card.id === selectedCard;\n            const quantityHasChanged = card.quantity === tempQuantity;\n            const isMinusDisabled = tempQuantity === 0;\n            const isPlusDisabled = tempQuantity >= 60;\n            const imageClasses = classNameUtil(\"border-4 rounded inline-block p-3 m-1 relative\", {\n              \"border-transparent\": true });\n            return (\n              <div key={card.card.id} className={imageClasses}>\n                <div className=\"fab bg-orange-dull\" style={{right: 0, top: 0}}>{isSelected ? `x${tempQuantity}` : `x${card.quantity}`}</div>\n                <img src={card.card.imageUrl} onClick={() => toggleSelectCard(card.card.id)} className=\"cursor-pointer\" style={{ maxWidth: 245 }} />\n                <div className=\"fab bg-orange-dull right-0 bottom-0 transition duration-500 cursor-pointer\" style={\n                  {\n                    top: isSelected ? 'calc(100% - 40px)' : '50%',\n                    left: isSelected ? 0 : 'calc(50% - 20px)',\n                    opacity: isSelected && !isMinusDisabled ? 1 : 0\n                  }\n                } onClick={() => !isMinusDisabled ? setTempQuantity(tempQuantity - 1) : null}>\n                  <FontAwesomeIcon icon=\"minus\" className=\"cursor-pointer\" />\n                </div>\n                <div className=\"fab bg-error right-0 bottom-0 transition duration-500 cursor-pointer\" style={\n                  {\n                    top: isSelected ? 'calc(100% - 40px)' : '50%',\n                    right: isSelected ? 'calc(50% + 20px)' : 'calc(50% - 20px)',\n                    opacity: isSelected && !quantityHasChanged ? 1 : 0\n                  }\n                } onClick={() => toggleSelectCard(card.card.id)}>\n                  <FontAwesomeIcon icon=\"times\" className=\"cursor-pointer\" />\n                </div>\n                <div className=\"fab bg-orange-dull right-0 bottom-0 transition duration-500 cursor-pointer\" style={\n                  {\n                    top: isSelected ? 'calc(100% - 40px)' : '50%',\n                    right: isSelected ? 0 : 'calc(50% - 20px)',\n                    opacity: isSelected && !isPlusDisabled ? 1 : 0\n                  }\n                } onClick={() => isPlusDisabled ? null : setTempQuantity(tempQuantity + 1)}>\n                  <FontAwesomeIcon icon=\"plus\" className=\"cursor-pointer\" />\n                </div>\n                <div className=\"fab  bg-green right-0 bottom-0 transition duration-500 cursor-pointer\" style={\n                  {\n                    top: isSelected ? 'calc(100% - 40px)' : '50%',\n                    right: isSelected ? 'calc(50% - 60px)' : 'calc(50% - 20px)',\n                    opacity: isSelected && !quantityHasChanged ? 1 : 0\n                  }\n                } onClick={() => updateDeck()}>\n                  <FontAwesomeIcon icon=\"check\" className=\"cursor-pointer\" />\n                </div>\n              </div>\n            )\n          }) : null}\n          {cards && cards.length === 0 ? <div className=\"mt-4\">Looks like your deck doesn't have any cards yet! Click on the plus icon to search for cards to add.</div> : null}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport class CardWithNumber {\n  quantity: number;\n  card: Card;\n\n  constructor(card: Card, quantity: number) {\n    this.card = card;\n    this.quantity = quantity;\n  }\n}","import React from \"react\"\nimport { HashRouter, Route, Router, Switch, useHistory, useRouteMatch } from \"react-router-dom\"\nimport { CardSearch } from \"../CardSearch\";\nimport { DeckDetails } from \"./DeckDetails\";\n\nexport const DeckDetailsRouter = () => {\n\n  const history = useHistory();\n  const { path } = useRouteMatch();\n  \n  return (\n    <Router history={history}>\n      <Switch>\n        <Route exact path={path}>\n          <DeckDetails />\n        </Route>\n        <Route exact path={`${path}/add`}>\n          <CardSearch />\n        </Route>\n      </Switch>\n    </Router>\n  )\n}","import React from \"react\"\nimport { HashRouter, Route, Router, Switch, useHistory, useRouteMatch } from \"react-router-dom\"\nimport { DecksResolver } from \"../resolvers/DecksResolver\";\nimport { Dashboard } from \"./dashboard\"\nimport { DeckDetailsRouter } from \"./DeckDetails/DeckDetailsRouter\";\n\nexport const PostLoginRouter: React.FC = () => {\n\n  const history = useHistory();\n  const { path } = useRouteMatch();\n  \n  return (\n    <Router history={history}>\n      <Switch>\n        <Route exact path={path}>\n          <DecksResolver>\n            <Dashboard />\n          </DecksResolver>\n        </Route>\n        <Route path={`${path}/decks/:deckId`}>\n          <DecksResolver>\n            <DeckDetailsRouter />\n          </DecksResolver>\n        </Route>\n      </Switch>\n    </Router>\n  )\n}","import React, { useContext } from \"react\";\nimport { BrowserRouter as Router, Switch, Route, HashRouter } from \"react-router-dom\";\nimport { SignUpForm } from \"./login/SignUpForm\";\nimport { LoginForm } from \"./login/LoginForm\";\nimport { Dashboard } from \"./post-login/dashboard\";\nimport { PreLoginLayout } from \"./layout/pre-login\";\nimport { LogoutGuardedRoute, LoginGuardedRoute } from \"./components/guarded-route\";\nimport { useConnectObservable } from \"./utils/hooks\";\nimport { ServiceContext } from \"./App\";\nimport { PostLoginRouter } from \"./post-login/PostLoginRouter\";\n\nexport function AppRouter() {\n  \n  const { myUserService } = useContext(ServiceContext);\n  const isAuthenticated = useConnectObservable<boolean>(myUserService.getIsLoggedIn(), !!localStorage.getItem('authorizationHeader'));\n  \n  return (\n\t\t<Router>\n\t\t\t<Switch>\n\t\t\t\t<Route exact path=\"/\">\n          <LogoutGuardedRoute isAuthenticated={isAuthenticated}>\n            <PreLoginLayout>\n              <LoginForm />\n            </PreLoginLayout>\n          </LogoutGuardedRoute>\n        </Route>\n\t\t\t\t<Route exact path=\"/signup\">\n          <LogoutGuardedRoute isAuthenticated={isAuthenticated}>\n            <PreLoginLayout>\n              <SignUpForm />\n            </PreLoginLayout>\n          </LogoutGuardedRoute>\n\t\t\t\t</Route>\n        <Route path=\"/dashboard\">\n          <LoginGuardedRoute isAuthenticated={isAuthenticated}>\n            <PostLoginRouter />\n          </LoginGuardedRoute>\n        </Route>\n\t\t\t</Switch>\n\t\t</Router>\n  )\n}","import { BehaviorSubject, Observable } from 'rxjs';\n\nexport enum ToastType {\n  success = 'success',\n  error = 'error'\n};\n\nexport class ToastService {\n\n  private toasts = new BehaviorSubject<Toast[]>([]);\n\n  public getToasts(): Observable<Toast[]> {\n    return this.toasts.asObservable();\n  }\n\n  public showSuccessToast(message: string): void {\n    this.toasts.next([...this.toasts.value, new Toast(ToastType.success, message)]);\n  }\n\n  public showErrorToast(message: string): void {\n    this.toasts.next([...this.toasts.value, new Toast(ToastType.error, message)]);\n  }\n\n  public removeToast(index: number): Promise<any> {\n    const curVal = this.toasts.value;\n    const newVal = [...curVal];\n    newVal[index].visible = false;\n    this.toasts.next(newVal);\n    return new Promise(function(res) { setTimeout(res, 200) })\n      .then(() => this.toasts.next(this.toasts.value.filter((_, i) => i !== index)));\n  }\n}\n\nexport class Toast {\n  type: ToastType;\n  message: string;\n  visible: boolean;\n\n  constructor(type: ToastType, message: string, visible?: boolean) {\n    this.type = type;\n    this.message = message;\n    this.visible = visible ? visible : true;\n  }\n}","import React, { useContext } from 'react';\nimport { Toast as ToastModel, ToastType } from '../services/ui/ToastService';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { classNameUtil } from '../utils';\nimport { ServiceContext } from '../App';\nimport { useConnectObservable } from '../utils/hooks';\n\nexport function Toast ({toastModel, id}: ToastProps) {\n\n  const { toastService } = useContext(ServiceContext);\n\n  const wrapperClassList = classNameUtil(\n    'text-white-100 p-4 w-4/5 rounded-md transition duration-500 ease-in-out mt-4 items-center flex z-50', { \n    'opacity-100': toastModel.visible,\n    'opacity-0': !toastModel.visible,\n    'bg-green': toastModel.type === ToastType.success,\n    'bg-error': toastModel.type === ToastType.error\n  });\n  return (\n    <div className={wrapperClassList}>\n      <div className=\"flex-grow\">{toastModel.message}</div>\n      <FontAwesomeIcon icon='times' className=\"cursor-pointer\" onClick={() => toastService.removeToast(id)} />\n    </div>\n  )\n}\n\ninterface ToastProps {\n  toastModel: ToastModel;\n  id: number;\n}\n\nexport const Toasts: React.FC = () => {\n\n  const { toastService } = useContext(ServiceContext);\n  const toasts = useConnectObservable(toastService.getToasts(), []);\n\n  return (\n    <div className=\"absolute top-0 w-full flex justify-center flex-col items-center\">\n      { toasts.map((t, i) => <Toast toastModel={t} id={i} key={i} />) }\n    </div>\n  )\n}","import { BehaviorSubject, Observable } from \"rxjs\";\nimport { map } from \"rxjs/operators\";\nimport { Deck } from \"../models/Deck\";\nimport { AxiosInstance, AxiosResponse } from 'axios';\n\nexport class DeckService {\n  private _userDecks = new BehaviorSubject<Deck[]>([]);\n\n  constructor(private http: AxiosInstance) {}\n\n  fetchDecks(userId: string | null): Promise<Deck[]> {\n    return this.http.get<Deck[]>(`/users/${userId}/decks`)\n      .then((res) => {\n        this._userDecks.next(res.data);\n        return res.data;\n      });\n  }\n\n  getDecks(): Observable<Deck[]> {\n    return this._userDecks.asObservable();\n  }\n\n  getDeck(id: string) {\n    return this.getDecks().pipe(\n      map((deckArr: Deck[]) => deckArr ? deckArr.find(d => d.deckId === id) : undefined)\n    )\n  }\n\n  updateDeck(deckId: string, deck: Deck): Promise<void | Deck> {\n    return this.http.put(`/decks/${deckId}`, deck)\n      .then(res => {\n        if (res && res.data) {\n          const curUserDecks = this._userDecks.value;\n          if (curUserDecks) {\n            this._userDecks.next(curUserDecks.map(d => {\n              if (d.deckId === deckId) {\n                return res.data\n              }\n              return d;\n            }))\n          }\n        }\n      })\n  }\n\n  deleteDeck(userId: string, deckId: string): Promise<void | Deck[]> {\n    return this.http.delete(`/users/${userId}/decks/${deckId}`)\n      .then(res => {\n        if (res.data) {\n          this._userDecks.next(res.data)\n        }\n      });\n  }\n\n  createDeck(userId: string, deck: Deck): Promise<void | AxiosResponse<Deck>> {\n    return this.http.post(`/users/${userId}/decks`, deck)\n      .then(res => {\n        if (res.data) {\n          const curVal = this._userDecks.value;\n          this._userDecks.next(curVal.concat(res.data))\n        }\n        return res;\n      })\n  }\n}","import { SignUpReq, User, LoginReq } from \"../models/SignUp\";\nimport { AxiosResponse, AxiosInstance } from \"axios\";\nimport { BehaviorSubject, Observable } from \"rxjs\";\n\nexport class MyUserService {\n\n  private myUserId = new BehaviorSubject<string | null>(localStorage.getItem('userId'));\n  private isLoggedIn = new BehaviorSubject<boolean>(!!localStorage.getItem('authorizationHeader'));\n\n  constructor(private http: AxiosInstance, private loginApi: AxiosInstance) {\n    const authHeader = localStorage.getItem('authorizationHeader');\n    if (authHeader) {\n      this.setAuthorizationHeader(authHeader);\n    }\n  }\n\n  public getIsLoggedIn(): Observable<boolean> {\n    return this.isLoggedIn.asObservable();\n  }\n\n  public getMyUserId(): Observable<string | null> {\n    return this.myUserId.asObservable();\n  }\n\n  public signUp(signUpReq: SignUpReq): Promise<AxiosResponse<User>> {\n    return this.http.post('/users', signUpReq);\n  }\n\n  public setAuthorizationHeader(authHeader: string): void {\n    if (authHeader) {\n      this.isLoggedIn.next(true);\n      localStorage.setItem('authorizationHeader', authHeader);\n      this.http.interceptors.request.use(req => {\n        req.headers.authorization = authHeader;\n        return req;\n      });\n    } else {\n      this.isLoggedIn.next(false);\n    }\n  }\n\n  public logout(): void {\n    localStorage.removeItem('authorizationHeader');\n    localStorage.removeItem('userId');\n    this.isLoggedIn.next(false);\n    window.location.reload();\n  }\n\n  public login(loginReq: LoginReq): Promise<AxiosResponse<null>> {\n    return this.loginApi.post('/login', loginReq).then(res => {\n      if (res && res.headers && res.headers.authorization) {\n        this.setAuthorizationHeader(res.headers.authorization);\n      }\n      if (res && res.headers && res.headers.userid) {\n        this.myUserId.next(res.headers.userid);\n        localStorage.setItem('userId', res.headers.userid);\n      }\n      return new Promise(function(resolve) { setTimeout(resolve, 100) });\n    });\n  }\n}","import axios, { AxiosInstance } from 'axios';\nimport { DeckService } from './services/DeckService';\nimport { MyUserService } from './services/MyUserService';\nimport { ToastService } from './services/ui/ToastService';\n\ntype AppServices = {\n  http: AxiosInstance,\n  myUserService: MyUserService,\n  toastService: ToastService,\n  deckService: DeckService\n}\n\nconst http: AxiosInstance = axios.create({\n  baseURL: '/api',\n  timeout: 1000\n});\nconst login: AxiosInstance = axios.create({\n  baseURL: '/',\n  timeout: 1000\n});\nconst myUserService = new MyUserService(http, login);\nconst toastService = new ToastService();\nconst deckService = new DeckService(http);\n\nexport default {\n  http,\n  myUserService,\n  toastService,\n  deckService\n} as AppServices;","import React from 'react';\nimport './App.css';\nimport { AppRouter } from './AppRouter';\nimport { Toasts } from './components/toast';\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { faTimes, faPlus, faTrash, faArrowLeft, faCheck, faMinus } from '@fortawesome/free-solid-svg-icons'\nimport { fab } from '@fortawesome/free-brands-svg-icons'\nimport AppServices from './AppServices';\n\nlibrary.add(fab, faTimes, faPlus, faTrash, faArrowLeft, faCheck, faMinus);\n\nexport const ServiceContext = React.createContext(AppServices);\n\nfunction App() {\n  return (\n    <ServiceContext.Provider value={AppServices}>\n      <Toasts />\n      <AppRouter />\n    </ServiceContext.Provider>\n  );\n}   \n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './assets/main.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}